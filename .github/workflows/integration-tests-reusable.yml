name: Integration Tests (Reusable Workflow)

on:
  workflow_call:
    inputs:
      all_platforms:
        required: true
        type: boolean
      num_shards:
        required: true
        type: number

env:
  dotnet-version: 6.0.x # SDK Version for building Dafny


jobs:
  # This job is used to dynamically calculate the matrix dimensions.
  # For now that just makes the sharding a little cleaner, but it will shortly
  # be used to switch between one platform and all platforms based on an input parameter.
  populate-matrix-dimensions:
    runs-on: ubuntu-latest
    steps:
      - name: Populate OS list (all platforms)
        id: populate-os-list-all
        if: inputs.all_platforms
        run: echo "::set-output name=os-list::[\"ubuntu-latest\", \"ubuntu-18.04\", \"macos-latest\", \"windows-2019\"]"
      - name: Populate OS list (one platform)
        id: populate-os-list-one
        if: "!inputs.all_platforms"
        run: echo "::set-output name=os-list::[\"windows-2019\"]"
      - name: Populate OS mapping for package.py
        id: populate-os-mapping
        run: |
          echo "::set-output name=os-mapping::{\"ubuntu-latest\": \"ubuntu\", \"ubuntu-18.04\": \"ubuntu\", \"macos-latest\": \"osx\", \"windows-2019\": \"win\"}"
      - name: Populate target runtime version list (all platforms)
        id: populate-target-runtime-version-all
        if: inputs.all_platforms
        run: echo "::set-output name=target-runtime-version::[\"oldest\", \"newest\"]"
      - name: Populate target runtime version list (one platform)
        id: populate-target-runtime-version-one
        if: "!inputs.all_platforms"
        run: echo "::set-output name=target-runtime-version::[\"oldest\"]"
      - name: Populate shard list
        id: populate-shard-list
        run: |
          echo "::set-output name=shard-list::[" $(seq -s , 1 ${{ inputs.num_shards }}) "]"
    outputs:
      os-list: ${{ steps.populate-os-list-all.outputs.os-list }} ${{ steps.populate-os-list-one.outputs.os-list }}
      os-mapping: ${{ steps.populate-os-mapping.outputs.os-mapping }}
      shard-list: ${{ steps.populate-shard-list.outputs.shard-list }}
  test:
    needs: populate-matrix-dimensions
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ${{ fromJson(needs.populate-matrix-dimensions.outputs.os-list) }}
        shard: ${{ fromJson(needs.populate-matrix-dimensions.outputs.shard-list) }}
      fail-fast: false
    steps:
    - name: Manually sync certs
      if: runner.os == 'Linux'
      run: cert-sync /etc/ssl/certs/ca-certificates.crt
    - uses: actions/setup-python@v1
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1.9.0
      with:
        dotnet-version: ${{ env.dotnet-version }}
    - name: C++ for ubuntu 18.04
      if: matrix.os == 'ubuntu-18.04'
      run: |
        sudo apt-get install -y build-essential
    - name: Choose the right C++ for ubuntu 18.04
      if: matrix.os == 'ubuntu-18.04'
      run: |
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 60
    - uses: actions/setup-python@v1
    - name: Set up oldest supported JDK
      if: matrix.target-language-version == 'oldest'
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Set up newest supported JDK
      if: matrix.target-language-version == 'newest'
      uses: actions/setup-java@v1
      with:
        java-version: 18
    - name: Upgrade outdated pip
      run: python -m pip install --upgrade pip
    - name: Install lit
      run: pip install lit OutputCheck pyyaml
    - uses: actions/setup-node@v1
    - run: npm install bignumber.js
    - name: Checkout Dafny
      uses: actions/checkout@v2
      with:
        path: dafny
        submodules: true
    - run: rm dafny/Test/libraries/lit.site.cfg # we remove the lit configuration file in the library repo (a git submodule) to prevent override
    - name: Create release
      run: |
        python dafny/Scripts/package.py 0.0.0-CI --os ${{ fromJson(needs.populate-matrix-dimensions.outputs.os-mapping)[matrix.os] }} --skip_manual=true --trial=true --github_secret=${{ secrets.GITHUB_TOKEN }} --out=CI.zip
    - if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Expand-Archive dafny/Package/CI.zip unzippedRelease
    - if: runner.os != 'Windows'
      run: |
        unzip dafny/Package/CI.zip -d unzippedRelease
    - name: Run integration tests
      if: runner.os == 'Windows'
      env:
        XUNIT_SHARD: ${{ matrix.shard }}
        XUNIT_SHARD_COUNT: ${{ inputs.num_shards }}
        DAFNY_RELEASE: ${{ github.workspace }}\unzippedRelease\dafny
      run: |
        dotnet test --logger trx dafny/Source/IntegrationTests/IntegrationTests.csproj
    - name: Run integration tests
      if: runner.os != 'Windows'
      env:
        XUNIT_SHARD: ${{ matrix.shard }}
        XUNIT_SHARD_COUNT: ${{ inputs.num_shards }}
        DAFNY_RELEASE: ${{ github.workspace }}/unzippedRelease/dafny
      run: |
        dotnet test --logger trx dafny/Source/IntegrationTests/IntegrationTests.csproj
    - uses: actions/upload-artifact@v2
      if: always()
      with:
        name: integration-test-results-${{ matrix.os }}
        path: dafny/Source/IntegrationTests/TestResults/*.trx
